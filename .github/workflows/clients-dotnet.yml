name: "clients/dotnet"

on:
  workflow_call:
    secrets:
      NUGET_KEY:
        required: true
    inputs:
      version:
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0      
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.x
            7.0.x

      - name: Install zig
        run: ./scripts/install_zig.sh

      - name: Dotnet version
        run: dotnet --version

      - name: Build dotnet
        working-directory: src/clients/dotnet
        run: dotnet build --configuration Release

      - name: Tests
        working-directory: src/clients/dotnet
        run: |
          dotnet test \
          /p:CollectCoverage=true \
          /p:Threshold=\"95,85,95\" \
          /p:ThresholdType=\"line,branch,method\"
      - name: Pack
        working-directory: src/clients/dotnet
        run: |
          version=""
          if [[ "${{ inputs.version }}" != "" ]]; then
            version="/p:AssemblyVersion=${{ inputs.version }} /p:Version=${{ inputs.version }}"
          fi
          dotnet pack TigerBeetle \
          --configuration Release \
          $version

      - name: Save nuget package
        uses: actions/upload-artifact@v3
        with:
          name: nuget-artifact
          path: src/clients/dotnet/TigerBeetle/bin/Release/*.nupkg

  samples_integration_test:
    needs: build

    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        os: [macos-latest] # [ubuntu-latest, macos-latest, windows-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]
        sample: [basic, two-phase]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: nuget-artifact
          path: ./nuget

      - if: matrix.os != 'windows-latest'
        run: |
          # Specifically for self-hosted M1 runners, OK if this fails on other envs.
          if [[ "$(uname)" == "Darwin" ]]; then
            brew install dotnet@7 || brew link --overwrite dotnet
          fi

      # Grab Zig
      - run: ./scripts/install.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

      # Build and run the integration tests
      - run: ./scripts/build.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }} client_integration
      - run: ./zig-out/bin/client_integration${{ matrix.os == 'windows-latest' && '.exe' || '' }} --language dotnet --sample ${{ matrix.sample }}

  docs:
    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        os: [windows-latest] #, macos-latest, ubuntu-latest, macos-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - if: matrix.os != 'windows-latest'
        run: |
          # Specifically for self-hosted M1 runners, OK if this fails on other envs.
          if [[ "$(uname)" == "Darwin" ]]; then
            brew install dotnet@7 || brew link --overwrite dotnet
          fi

      # Grab Zig
      - run: ./scripts/install.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

      - run: ./scripts/build.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }} client_docs
      - run: ./zig-out/bin/client_docs${{ matrix.os == 'windows-latest' && '.exe' || '' }} --language dotnet
      
      - if: matrix.os == 'ubuntu-latest'
        run: ./scripts/fail_on_diff.sh
